{"mappings":"oeASA,IAAAA,EAAAC,EAAA,S,aAGA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAIbQ,SAASC,cAAc,SAASC,iBAAiB,UAAU,SAAUC,GACnEA,EAAEC,iBAEF,MAAMC,EAAaC,SAASH,EAAEI,OAAOC,SAAShB,MAAMiB,OAC9CC,EAAYJ,SAASH,EAAEI,OAAOC,SAASG,KAAKF,OAC5CG,EAAcN,SAASH,EAAEI,OAAOC,SAASK,OAAOJ,OAEtD,IAAK,IAAIK,EAAI,EAAGA,EAAIF,EAAaE,IAAK,CAEpCxB,EAAcwB,EAAI,EADGT,EAAaS,EAAIJ,GAEnCK,MAAK,EAACxB,SAAEA,EAAQC,MAAEA,MACjBJ,EAAA4B,OAAgBC,QACd,uBAAqB1B,QAAiBC,MAAU,IAGnD0B,OAAM,EAAC3B,SAAEA,EAAQC,MAAEA,MAClBJ,EAAA4B,OAAgBG,QACd,sBAAoB5B,QAAeC,MAAU,G","sources":["src/js/03-promises.js"],"sourcesContent":["/*\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  if (shouldResolve) {\n    // Fulfill\n  } else {\n    // Reject\n  }\n}*/\nimport Notiflix from 'notiflix';\nconst Notiflix = require('notiflix');\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\ndocument.querySelector('.form').addEventListener('submit', function (e) {\n  e.preventDefault();\n\n  const delayInput = parseInt(e.target.elements.delay.value);\n  const stepInput = parseInt(e.target.elements.step.value);\n  const amountInput = parseInt(e.target.elements.amount.value);\n\n  for (let i = 0; i < amountInput; i++) {\n    const currentDelay = delayInput + i * stepInput;\n    createPromise(i + 1, currentDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.Success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.Failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n});\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","e","preventDefault","delayInput","parseInt","target","elements","value","stepInput","step","amountInput","amount","i","then","Notify","Success","catch","Failure"],"version":3,"file":"03-promises.2b0c1c04.js.map"}